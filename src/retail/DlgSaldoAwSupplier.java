/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgSaldoAwSupplier.java
 *
 * Created on 21 Des 10, 5:47:27
 */

package retail;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.KeyboardFocusManager;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.AbstractCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import org.jdesktop.swingx.JXDatePicker;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.autocomplete.ComboBoxCellEditor;
import retail.main.GeneralFunction;

/**
 *
 * @author cak-ust
 */
public class DlgSaldoAwSupplier extends javax.swing.JDialog {
    private Connection conn;
    private String sKodeSupp="";
    GeneralFunction fn=new GeneralFunction();
    MyKeyListener kListener=new MyKeyListener();
    private Object objForm;

    /** Creates new form DlgSaldoAwSupplier */
    public DlgSaldoAwSupplier(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void setConn(Connection con){
        this.conn=con;
    }

    private void udfInitForm(){
        MyTableCellEditor cEditor=new MyTableCellEditor();
        jTable1.getColumn("No. Faktur").setCellEditor(cEditor);
        jTable1.getColumn("Saldo Awal").setCellEditor(cEditor);
        jTable1.getColumn("Termin").setCellEditor(terminCellEditor());
        jTable1.getColumn("Tanggal").setCellEditor(new DateCellEditor());
        
        jTable1.getColumn("Tanggal").setCellRenderer(new MyRowRenderer());
        jTable1.getColumn("Saldo Awal").setCellRenderer(new MyRowRenderer());

        jTable1.getColumn("OldFaktur").setMinWidth(0);  jTable1.getColumn("OldFaktur").setPreferredWidth(0); jTable1.getColumn("OldFaktur").setMaxWidth(0);
        jTable1.setRowHeight(22);
        try{
            ResultSet rs=conn.createStatement().executeQuery(
                    "select no_faktur, tanggal, coalesce(nilai_faktur,0) as nilai_faktur, coalesce(termin,'') as termin " +
                    "from r_supp_saldo_awal " +
                    "where kode_supp='"+sKodeSupp+"'");

            while(rs.next()){
                ((DefaultTableModel)jTable1.getModel()).addRow(new Object[]{
                    rs.getString("no_faktur"),
                    rs.getDate("tanggal"),
                    rs.getDouble("nilai_faktur"),
                    rs.getString("termin")
                });
            }
            rs.close();
            if(jTable1.getRowCount()==0)
                ((DefaultTableModel)jTable1.getModel()).setNumRows(1);
        }catch(SQLException se){
            JOptionPane.showMessageDialog(this, se.getMessage());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Saldo Awal Supplier");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Faktur", "Tanggal", "Saldo Awal", "Termin", "OldFaktur"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 510, 160));

        btnCancel.setText("Cancel");
        btnCancel.setName("btnCancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 230, 70, 25));

        btnOK.setText("OK");
        btnOK.setName("btnOK"); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        getContentPane().add(btnOK, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 230, 80, 25));

        jLabel1.setForeground(new java.awt.Color(0, 0, 102));
        jLabel1.setText("<html>\nAnda dapat menambah, mengubah dan menghapus langsung pada tabel dibawah ini. <br>\nUntuk menambah gunakan <b>panah bawah</b> pada keyboard. <br>\nuntuk menghapus gunakan tombol <b>Del</b> pada keyboard \n</html>"); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 480, 50));

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-549)/2, (screenSize.height-300)/2, 549, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
}//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        udfSave();
}//GEN-LAST:event_btnOKActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        udfInitForm();
    }//GEN-LAST:event_formWindowOpened

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgSaldoAwSupplier dialog = new DlgSaldoAwSupplier(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void udfSave() {
        try{
            String sQry="", sOldFAktur="";
            for(int i=0; i< jTable1.getRowCount(); i++){
                sOldFAktur=jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("OldFaktur"))==null? "":jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("OldInvoice")).toString();
                sQry+=sQry.length()>0? " union all ": "";
                sQry+="select fn_r_supp_saldo_awal('"+sOldFAktur+"', " +
                        "'"+jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("No. Faktur"))+"', " +
                        "'"+sKodeSupp+"', " +
                        "'"+fn.yyyymmdd_format.format(jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("Tanggal")))+"', " +
                        fn.udfGetDouble(jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("Saldo Awal")))+ ", " +
                        "'"+jTable1.getValueAt(i, jTable1.getColumnModel().getColumnIndex("Termin")).toString()+"');\n";

            }
            System.out.println(sQry);

            ResultSet rs=conn.createStatement().executeQuery(sQry);
            if(rs.next()){
                JOptionPane.showMessageDialog(this, "Simpan saldo awal sukses!");
                JOptionPane.showMessageDialog(this, "Simpan saldo awal sukses!");
                if(objForm!=null && objForm instanceof FrmSupplierMaster)
                    ((FrmSupplierMaster)objForm).saldoAwal();
            }
            this.dispose();
        }catch(SQLException se){
            JOptionPane.showMessageDialog(this, se.getMessage());
        }
    }

    public void setSrcForm(Object aThis) {
        objForm=aThis;
    }

    private Object[] getTerminList(){
        Object[] obj=null;
        try{
            ResultSet rs=conn.createStatement().executeQuery("select count(*) from m_termin");
            rs.next();
            obj=new Object[rs.getInt(1)];
            int i=0;
            rs.close();
            rs=conn.createStatement().executeQuery("select* from m_termin order by kode");
            while(rs.next()){
                obj[i]=rs.getString(1);
                i++;
            }
            rs.close();
        }catch(SQLException se){
            JOptionPane.showMessageDialog(this, se.getMessage());
        }
        return obj;
    }

    private TableCellEditor terminCellEditor() {
        JComboBox combo = new JComboBox(getTerminList()) {
            protected boolean processKeyBinding(KeyStroke ks, KeyEvent e,
                    int condition, boolean pressed) {
                boolean retValue = super.processKeyBinding(ks, e, condition, pressed);

                if (!retValue && isStartingCellEdit() && editor != null) {
                    // this is where the magic happens
                    // not quite right; sets the value, but doesn't advance the
                    // cursor position for AC
                    editor.setItem(String.valueOf(ks.getKeyChar()));
                }

                return retValue;
            }

            private boolean isStartingCellEdit() {
                JTable table = (JTable) SwingUtilities.getAncestorOfClass(
                        JTable.class, this);

                return table != null
                        && table.isFocusOwner()
                        && !Boolean.FALSE.equals((Boolean) table
                                .getClientProperty("JTable.autoStartsEdit"));
            }
        };
        AutoCompleteDecorator.decorate(combo);

        return new ComboBoxCellEditor(combo);
    }

     public class DateCellEditor extends AbstractCellEditor implements TableCellEditor {
        public DateCellEditor() { datePicker = new JXDatePicker();
            //datePicker.setFormats(new DateFormat[] { DateFormat.getDateInstance(DateFormat.SHORT) });
        datePicker.setFormats("dd/MM/yyyy");
        }
        public Object getCellEditorValue() {
            return datePicker.getDate();
        }
        public Component getTableCellEditorComponent(
            JTable table, Object value, boolean isSelected, int row, int column){
            if(value != null && value instanceof Date) {
                datePicker.setDate((Date) value);
            }
            return datePicker;
        }
        private JXDatePicker datePicker;
}

    void setKodeSupplier(String text) {
        this.sKodeSupp=text;
    }

    public class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {
        private Toolkit toolkit;
        JTextField text= new JTextField() {
            protected boolean processKeyBinding(final KeyStroke ks, final KeyEvent e, final int condition, final boolean pressed) {
                if (hasFocus()) {
                    return super.processKeyBinding(ks, e, condition, pressed);
                } else {
                    this.requestFocus();
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            processKeyBinding(ks, e, condition, pressed);
                        }
                  });
                    return true;
                }
            }
        };

        int col, row;

        public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int rowIndex, int vColIndex) {
            // 'value' is value contained in the cell located at (rowIndex, vColIndex)
            row=rowIndex;
            col=vColIndex;

            if(vColIndex!=jTable1.getColumnModel().getColumnIndex("No. Faktur")){
               text.addKeyListener(kListener);
            }else{
               text.removeKeyListener(kListener);
            }

            text.setName("textEditor");

           //col=vColIndex;
           text.setBackground(new Color(0,255,204));
           text.addFocusListener(txtFocusListener);
           //text.addKeyListener(kListener);
           text.setFont(table.getFont());
           //text.setName("textEditor");


            //text.setText(value==null? "": value.toString());
            //component.setText(df.format(value));

            if(value instanceof Double || value instanceof Float|| value instanceof Integer){
                text.setText(fn.dFmt.format(value));

            }else
                text.setText(value==null? "":value.toString());
           return text;
        }

        public Object getCellEditorValue() {
            Object o="";//=component.getText();
            Object retVal = 0;
            try {
                if(col==jTable1.getColumnModel().getColumnIndex("No. Faktur")){
                    retVal = ((JTextField)text).getText();
                }else if(col==jTable1.getColumnModel().getColumnIndex("Saldo Awal")){
                    retVal = fn.udfGetDouble(((JTextField)text).getText());
                }else
                    retVal = fn.udfGetDouble(((JTextField)text).getText());

                return retVal;
            } catch (Exception e) {
                toolkit.beep();
                retVal=0;
            }
            return retVal;
        }

    }

    public class MyKeyListener extends KeyAdapter {
        @Override
        public void keyTyped(java.awt.event.KeyEvent evt) {
          if (evt.getSource() instanceof JTextField &&
              ((JTextField)evt.getSource()).getName()!=null &&
              ((JTextField)evt.getSource()).getName().equalsIgnoreCase("textEditor") &&
              jTable1.getSelectedColumn()!=jTable1.getColumnModel().getColumnIndex("Saldo Awal")) {

              char c = evt.getKeyChar();
              if (!((c >= '0' && c <= '9')) &&
                    (c != KeyEvent.VK_BACK_SPACE) &&
                    (c != KeyEvent.VK_DELETE) &&
                    (c != KeyEvent.VK_ENTER) &&
                    (c != '-') &&
                    (c != '.')) {
                    getToolkit().beep();
                    evt.consume();
                    return;
              }
           }

        }
        public void keyPressed(KeyEvent evt) {
            Component ct = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();
            int keyKode = evt.getKeyCode();
            switch(keyKode){
               case KeyEvent.VK_ENTER : {
                    if(!(ct instanceof JTable))                    {
                        if (!fn.isListVisible()){
                            Component c = findNextFocus();
                            if (c==null) return;
                            c.requestFocus();
                        }else{
                            fn.lstRequestFocus();
                        }
                    }
                    break;
                }
                case KeyEvent.VK_DOWN: {
                    if(!(ct.getClass().getSimpleName().equalsIgnoreCase("JTABLE")))
                        {
                            if (!fn.isListVisible()){
                                Component c = findNextFocus();
                                if (c==null) return;
                                c.requestFocus();
                            }else{
                                fn.lstRequestFocus();
                            }
                            break;
                    }
                }

                case KeyEvent.VK_UP: {
                    if(!(evt.getSource() instanceof JTable)){
                        Component c = findPrevFocus();
                        c.requestFocus();
                    }else if(evt.getSource().equals(jTable1) && jTable1.getSelectedRow()==0){
                        //txtItem.requestFocus();
                    }
                    break;
                }
                case KeyEvent.VK_ESCAPE:{
                    if(JOptionPane.showConfirmDialog(null,"Anda Yakin Untuk Keluar?",
                            "SHS Pharmacy",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
                        dispose();
                    }
                    break;
                }
                case KeyEvent.VK_F2:{
                    udfSave();
                    break;
                }
                case KeyEvent.VK_F5:{
                    //udfNew();
                    break;
                }
                case KeyEvent.VK_DELETE:{
//                    if(evt.getSource().equals(tblSupplier) && tblSupplier.getSelectedRow()>=0){
//                        int iRow[]= tblSupplier.getSelectedRows();
//                        int rowPalingAtas=iRow[0];
//
////                        if(JOptionPane.showConfirmDialog(FrmPO.this,
////                                "Item '"+tblPR.getValueAt(iRow, 3).toString()+"' dihapus dari PO?", "Confirm", JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION)
////                            return;
//
//                        for (int a=0; a<iRow.length; a++){
//                            ((DefaultTableModel)tblSupplier.getModel()).removeRow(tblSupplier.getSelectedRow());
//                        }
//
//                        if(tblSupplier.getRowCount()>0 && rowPalingAtas<tblSupplier.getRowCount()){
//                            //if(tblPR.getSelectedRow()>0)
//                                tblSupplier.setRowSelectionInterval(rowPalingAtas, rowPalingAtas);
//                        }
//                        else{
//                            if(tblSupplier.getRowCount()>0)
//                                tblSupplier.setRowSelectionInterval(rowPalingAtas-1, rowPalingAtas-1);
//                            else
//                                txtItem.requestFocus();
//
//                        }
//                        if(tblSupplier.getSelectedRow()>=0)
//                            tblSupplier.changeSelection(tblSupplier.getSelectedRow(), 0, false, false);
//                    }
//                    break;
//
                }


            }
        }

//        @Override
//        public void keyReleased(KeyEvent evt){
//            if(evt.getSource().equals(txtDisc)||evt.getSource().equals(txtQty)||evt.getSource().equals(txtUnitPrice))
//                GeneralFunction.keyTyped(evt);
//        }

        public Component findNextFocus() {
            // Find focus owner
            Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            Container root = c == null ? null : c.getFocusCycleRootAncestor();

            if (root != null) {
                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
                Component nextFocus = policy.getComponentAfter(root, c);
                if (nextFocus == null) {
                    nextFocus = policy.getDefaultComponent(root);
                }
                return nextFocus;
            }
            return null;
        }

        public Component findPrevFocus() {
            // Find focus owner
            Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            Container root = c == null ? null : c.getFocusCycleRootAncestor();

            if (root != null) {
                FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
                Component prevFocus = policy.getComponentBefore(root, c);
                if (prevFocus == null) {
                    prevFocus = policy.getDefaultComponent(root);
                }
                return prevFocus;
            }
            return null;
        }


    }

    private class MyRowRenderer extends DefaultTableCellRenderer implements TableCellRenderer{
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {


            if(value instanceof Date ){
                value=new SimpleDateFormat("dd/MM/yyyy").format(value);
            if(value instanceof Timestamp ){
                value=fn.ddMMyy_format.format(value);
            }}else if(value instanceof Double ||value instanceof Float  ){
                setHorizontalAlignment(SwingConstants.RIGHT);
                value=fn.dFmt.format(value);
            }else if(value instanceof Integer ){
                setHorizontalAlignment(SwingConstants.RIGHT);
                value=fn.intFmt.format(value);

            }
            setFont(table.getFont());
            if(isSelected){
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            }else{
                setBackground(table.getBackground());
                setForeground(table.getForeground());
            }

            if (hasFocus) {
                setBorder( UIManager.getBorder("Table.focusCellHighlightBorder") );
                if (!isSelected && table.isCellEditable(row, column)) {
                    Color col;
                    col = UIManager.getColor("Table.focusCellForeground");
                    if (col != null) {
                        super.setForeground(col);
                    }
                    col = UIManager.getColor("Table.focusCellBackground");
                    if (col != null) {
                        super.setBackground(col);
                    }
                }
            } else {
                setBorder(noFocusBorder);
            }


            setValue(value);
            return this;
        }
    }

    private FocusListener txtFocusListener=new FocusListener() {
        public void focusGained(FocusEvent e) {
            if(e.getSource() instanceof JTextField || e.getSource() instanceof JFormattedTextField){
                ((JTextField)e.getSource()).setBackground(Color.YELLOW);
                if((e.getSource() instanceof JTextField && ((JTextField)e.getSource()).getName()!=null && ((JTextField)e.getSource()).getName().equalsIgnoreCase("textEditor"))){
                    ((JTextField)e.getSource()).setSelectionStart(0);
                    ((JTextField)e.getSource()).setSelectionEnd(((JTextField)e.getSource()).getText().length());
                }
            }
        }


        public void focusLost(FocusEvent e) {
            if(e.getSource().getClass().getSimpleName().equalsIgnoreCase("JTextField")||
                    e.getSource().getClass().getSimpleName().equalsIgnoreCase("JFormattedTextField")){
                ((JTextField)e.getSource()).setBackground(Color.WHITE);



           }
        }


    } ;
}
